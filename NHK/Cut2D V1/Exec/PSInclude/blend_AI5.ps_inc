%%BeginResource: procset Adobe_blend_AI5 1.4 0
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
bind def
} bind def
/xs
{
exch store
} bd
/nullProc
{
{
}
} def
/initialize
{
pop pop
Adobe_blend_AI5 begin
Adobe_blend_AI5_vars begin
/_contoneDevice where
{
pop
}
{
/_contoneDevice false def	
} ifelse

/_dpiThreshold where
{
pop
}
{	
/_dpiThreshold 600 def
} ifelse

/_screenFreqThreshold where
{
pop
}
{	
/_screenFreqThreshold 150 def
} ifelse

/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
/invertXfer
{
[
{
1 exch sub
} /exec load systemdict/currenttransfer get exec /exec load
] cvx systemdict/settransfer get exec
} bd
/spotDict 3 dict dup begin
/nSpots 2 def
/spot1 7 dict def
/spot2 7 dict def
end
def
composite?
{
/_setgray_ /setgray load def
/_fill_ /fill load def
/_image_ /image load def
}
{
/_setgray_ systemdict/setgray get def
/_fill_ systemdict/fill get def
/_image_ systemdict/image get def
} ifelse
} bd
/terminate
{
currentdict Adobe_blend_AI5_vars eq
{
end
currentdict Adobe_blend_AI5 eq
{
end
} if
} if
} bd
/_compositeSpotDevice where
{
begin
_compositeSpotDevice 0 ne {userdict /composite? true put} if
end
}
{
/_compositeSpotDevice 0 def	
} ifelse

/nullString () def
/d255 256 array def
0 1 255
{
d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
/f /F /s /S /b /B
}
{
null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
pop lv1Fix
}
{
false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
counttomark 2 add -1 roll
} bd
/setCustomColor
{
dup /ccTint exch store
1 exch sub 6 1 roll
ccAry1 astore
exch setcustomcolor
} bd
/currentCustomColor
{
ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
pop
}
{
/nsetcustomcolor
{
pop setcmykcolor	
} bd
} ifelse
/nsetcustomcolorend where 
{
pop
}
{
/nsetcustomcolorend
{
} bd
} ifelse
/setBSpace
{
newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
dup 0 eq
{
pop

spotColor?
{
dup 1 exch sub /ccTint exch def
ccAry1 4 /Black put
} if
setgray
}
{
1 eq
{
setcmykcolor
}
{
composite? not colorType 2 lt and
{
forceCMYK
}
{
setCustomColor
} ifelse
} ifelse
} ifelse
} bd
/makeByte
{
/tmp 0 store
255 mul cvi
8 string 8
{
dup tmp 3 index put /tmp tmp 1 add store
} repeat
exch pop
} bd
/setImgSpace
{
cDataLen 1 8
2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
setImgSpace cData /_image_ load
{
exec
} stopped
{
$error /errorname get /undefinedresult ne
{
stop
}
{
pop pop pop pop pop
} ifelse
} if
} bd
level2?
{
/bFill
{
_fill
} def
/bCImg
{
/cDataLen bDataLen store
setImgSpace
setSSave
expandSpot
cyData mgData yeData cData
expandCMYK
true 4 spotDict
{
ncolorimage
} stopped
{
$error /errorname get /undefinedresult ne
{
stop
}
{
10
{
pop
} repeat
} ifelse
} if
sSave restore
} bd
} if
/expandOne
{
dup type /stringtype ne
{
cDataLen string
exch
dup 0 ne
{
255 mul cvi
0 1 cDataLen 1 sub
{
3 copy
exch put pop
} for
} if
pop
} if
} bd
/expandSpot
{
spotColor?
{
spotDict begin
spot1 begin
tintImage type /nulltype ne
{
tintImage expandOne /tintImage exch def
} if
end
spot2 begin
tintImage type /nulltype ne
{
tintImage expandOne /tintImage exch def
} if
end
end
} if
} bd
/expandCMYK
{
4
{
expandOne 4 1 roll
} repeat
} bd
/colorimage where dup
{
exch pop

/ncolorimage where
{
pop
}
{
/ncolorimage {pop colorimage} bd
} ifelse
} if
not
{
/ncolorimage where 
{
pop
}
{
/colorimage? false store
/ncolorimage
{
pop pop pop

setSSave
/blackData xs
/yeData xs
/mgData xs
/cyData xs
/cnt1 0 store
[
byte dup 0
cyData dup type /stringtype eq
{
/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
}
{
.3 mul
} ifelse
mgData dup type /stringtype eq
{
/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
}
{
.59 mul
} ifelse
yeData dup type /stringtype eq
{
/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
}
{
.11 mul
} ifelse
blackData dup type /stringtype eq
{
/cnt1 cvx /get cvx d255 /exch cvx /get cvx
} if
/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
/dup cvx 0 /lt cvx
{
pop 0
} /if cvx
/dup cvx 1 /gt cvx
{
pop 1
} /if cvx
255 /mul cvx /cvi cvx
256 /mod cvx
/dup cvx 0 /lt cvx
{
pop 0
} /if cvx
/put cvx
/cnt1 dup cvx 1 /add cvx /store cvx
] cvx
bind
_image_ 
sSave restore
} bd
} ifelse
} if
level2? not
{
/bCImg
{
/cDataLen bDataLen store
setImgSpace
setSSave
expandSpot
cyData mgData yeData cData
colorimage? 
{
expandCMYK
} if
true 4 spotDict
{
ncolorimage
} stopped
{
$error /errorname get /undefinedresult ne
{
stop
}
{
10
{
pop
} repeat
} ifelse
} if
sSave restore
} bd
/bwFill
{
setSSave
/cDataLen 8 store
/cData currentgray makeByte store
bwImage
sSave restore
} bd
/c1ImgFill
{
setSSave
/cDataLen 8 store
setImgSpace
spotColor?
{
spotDict begin
spot1 begin
currentCustomColor makeByte /tintImage exch def
/name exch def
/spot_K exch def
/spot_Y exch def
/spot_M exch def
/spot_C exch def
end
spot2 initSpotData
end
} if
currentcmykcolor
4
{
makeByte 4 1 roll
} repeat
true 4 spotDict
{
ncolorimage
} stopped
{
$error /errorname get /undefinedresult ne
{
stop
}
{
10
{
pop
} repeat
} ifelse
} if
sSave restore
} bd
/bFill
noImg
{
{
_fill
}
}
{
{
color?
{
c1ImgFill
}
{
bwFill
} ifelse
}
} ifelse
bd
} if
composite?
{
/bCFun
{
color?
{
cyData dup type /stringtype eq
{
/ndx cvx /get cvx d255 /exch cvx /get cvx
} if
mgData dup type /stringtype eq
{
/ndx cvx /get cvx d255 /exch cvx /get cvx
} if
yeData dup type /stringtype eq
{
/ndx cvx /get cvx d255 /exch cvx /get cvx
} if
cData dup type /stringtype eq
{
/ndx cvx /get cvx d255 /exch cvx /get cvx
} if
spotColor?
{
spotDict begin
/spotDict cvx /begin cvx
spot1 begin
tintImage dup type /stringtype eq
{
/ndx cvx /get cvx d255- /exch cvx /get cvx
}
{
dup type /nulltype ne 
{
name type /nametype ne {1 exch sub} if
} if
} ifelse
end
/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
spot2 begin
tintImage dup type /stringtype eq
{
/ndx cvx /get cvx d255- /exch cvx /get cvx
}
{
dup type /nulltype ne 
{
name type /nametype ne {1 exch sub} if
} if
} ifelse
end
/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
/end cvx
end
/spotDict cvx
/nsetcustomcolor cvx
}
{
/setcmykcolor cvx
} ifelse
}
{
cData /ndx cvx /get cvx
d255 /exch cvx /get cvx
/setgray cvx
} ifelse
} bd
/Bc
{
newpath
gsave
setBSpace
nColors 1 eq
{
pop pop
setCStop
} if
bFill
grestore
} bd
/linealBm
{
/nColors dup load 1 sub store
newpath
gsave
setBSpace
blend?
{
linImg
}
{
bFill
} ifelse
grestore
nColors 1 gt
{
getRData
} if
} bd
/rdBm
{
/nColors dup load 1 sub store
_fill
gsave
bUMatrix astore concat
bHi?
{
xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
rampPoint 1 lt
{
1 rampPoint sub dup xHi mul exch yHi mul translate
} if
} if
nColors
{
0 0 rampPoint 0 360 arc
_fill
blend? bHi? or
{
rdBlend
} if
nColors 1 gt
{
getRData
} if
/nColors dup load 1 sub store
} repeat
/nColors 1 store
grestore
} bd
/cGetRData
{
setCStop
/blend?
cData type /stringtype eq
dup not color? and
{
pop
cyData type /stringtype eq
mgData type /stringtype eq
yeData type /stringtype eq
or or
} if
store
} def
/cGetRData
} if
/eCStop
{
mark
1 index 3 mul 3 add dup 8 gt
{
pop 8
} if
1 roll
cleartomark
} bd
composite? not
{
/knockOut
level2?
{
{
0 0 0 0 setcmykcolor _fill
}
}
{
/bFill noImg
{
{
_fill
}
}
{
{
_of true eq
{
currentgray 1 ne
{
bwFill
} if
}
{
bwFill
} ifelse
}
} ifelse
def
/whiteByte 1 makeByte def
noImg
{
{
0 0 0 0 setcmykcolor _fill
}
}
{
{
cBType 0 eq
{
setSSave
/cData whiteByte store
/cDataLen 8 store
bwImage
sSave restore
}
{
_fill
} ifelse
}
} ifelse
} ifelse
bd
/bCFun
{
cData dup type /stringtype ne
{
color?
{
1 exch sub
} if
}
{
/ndx cvx /get cvx
color? customColor? not and
{
d255-
}
{
d255
} ifelse
/exch cvx /get cvx
} ifelse
/_setgray_ cvx
} bd
/eCCBlend
{
dup 3 eq
{
pop
mark 7 1 roll
6 copy ccThrough? dup /blend? xs
{
/startC? true store
setCustomColor
customColor?
{
/cData tint1Data store
setCDataLen
} if
/endC?
3 index 3 eq
{
4 index 1 ne
}
{
false
} ifelse
store
} if
cleartomark
stop
} if
1 eq
{
pop pop pop
} if
pop
/startC? false store
6
{
8 index
} repeat
ccThrough? dup /blend? xs
{
/endC? true store
blend? not
{
stop
} if
customColor?
{
/cData tint1Data store
setCDataLen
} if
} if
} bd
/handleOP
{
_of not
{
knockOut
} if
} bd
/handleROP
{
_of not
{
0 0 0 0 setcmykcolor _fill
}
{
newpath	
} ifelse
} bd
/rdBm
{
/nColors dup load 1 sub store
blend? 
{
_fill
}
{
handleROP
} ifelse
gsave
bUMatrix astore concat
bHi?
{
xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
rampPoint 1 lt
{
1 rampPoint sub dup xHi mul exch yHi mul translate
} if
} if
nColors
{
0 0 rampPoint 0 360 arc
blend?
{
cData type /stringtype ne bHi? not and
{
cData color?
{
1 exch sub
} if
_setgray_ 
_fill_ 
}
{
cData type /stringtype ne
{
/cDataLen 1 store
/bDataLen 1 store
} if
rdBlend
} ifelse
}
{

handleROP

pTState?
{
/bAxis rampPoint endPoint sub store
xHi bAxis mul yHi bAxis mul translate
} if
} ifelse

nColors 1 gt
{
getRData
} if
/nColors dup load 1 sub store
} repeat
/nColors 1 store
grestore
} bd
/ccThrough?
{
gsave
pop 0 setCustomColor
currentcmykcolor
grestore
anyColor?
} bd
/forceCMYK
{
exch pop
1 exch sub 5 1 roll
4
{
4 index mul 4 1 roll
} repeat
0
cCMYKData dup /cData ne
{
dup /yeData eq
{
pop 1 add
}
{
/mgData eq
{
2
}
{
3
} ifelse
add
} ifelse
0
} if
pop
index
0 eq
{
pop pop pop pop 0 0 0 0
} if
setcmykcolor
pop
/fCMYK? true store
} bd
/endCapSepBc
{
pop pop
dup 0 eq
{
pop
setgray
}
{
1 eq
{
setcmykcolor
}
{
colorType 1 eq
{
forceCMYK
}
{
fCMYK?
{
forceCMYK
}
{
setCustomColor
} ifelse
} ifelse
} ifelse
} ifelse
currentcmykcolor anyColor? 
blend? and
{
bFill
}
{
handleOP
} ifelse

} bd
} if
/cCMYKData 0 def
composite? dup not
{
pop customColor?
} if
not
{
/cCMYKData
/cyData /mgData /yeData /cData
black? not
{
yellow?
{
exch
}
{
magenta?
{
3
}
{
4
} ifelse
-1 roll
} ifelse
} if
4 1 roll pop pop pop
store
/Bc
{
gsave
setBSpace
nColors 1 gt
{

blend? currentcmykcolor anyColor? and
{
bFill
}
{
handleOP
} ifelse
}
{
endCapSepBc
} ifelse
grestore
newpath
} bd
/linealBm
{
/nColors dup load 1 sub store
newpath
gsave
setBSpace
blend?
{
cCMYKData load dup type /stringtype eq
{
dup length /cDataLen xs
/cData xs
gsave
colorType 0 ne noImg not and
{
invertXfer
} if
linImg
grestore
}
{
pop bFill
} ifelse
}
{
handleOP
} ifelse
grestore
nColors 1 gt
{
getRData
} if
} bd
/cmykGetRData
{
/fCMYK? false store
blend?
{
{
cmykDataProcs colorType get exec
} stopped
pop
blend?
{
/cData cCMYKData load store
setCDataLen
} if
} if
} def
/cmykDataProcs
[
{
pop
black? dup /blend? xs
{
setgray
0
} if
pop
}
{
cCMYKData load dup type /stringtype ne
{
0 0 0
cyan? not
{
4 magenta?
{
1
}
{
yellow?
{
2
}
{
3
} ifelse
} ifelse
roll
} if
4 copy add add add 0 eq
{
/blend? false store
} if

setcmykcolor
/startC? true store
/endC? true store
eCStop
stop
} if
pop
dup 0 eq
{
pop
setgray
}
{
1 eq
{
setcmykcolor
}
{
forceCMYK
} ifelse
} ifelse
} bind
/eCCBlend load
{
cBType 1 eq
{
tint1Data tint2Data
/tint1Data xs
/tint2Data xs
} if
0 eq
{
black?
{
setgray
}
{
0 0 0 4 -1 roll 1 exch sub setcmykcolor
} ifelse
black?
{
/blend? true store
} if
6
{
8 index
} repeat
ccThrough?
{
/blend? true store
}
{
black?
{
/cData tint1Data store
setCDataLen
}
{
/blend? false store
} ifelse
} ifelse
}
{
mark 7 1 roll
6 copy ccThrough?
{
forceCMYK
pop
stop
} if
9 index 0 eq
{
black? dup /blend? xs
{
pop 1 setgray
/cData tint2Data store
setCDataLen
0
} if
pop
}
{
/blend?
6
{
16 index
} repeat
ccThrough?
store
blend?
{
forceCMYK
} if
} ifelse
cleartomark
} ifelse
} bind
] def
/cmykGetRData
} if
composite? dup not
{
pop isCMYKSep?
} if
not
{
/endCapSepBc
{
/white? false store
pop pop
dup 0 eq
{
pop
/white? 1 index 1 eq store
setgray
}
{
1 eq
{
setcmykcolor
}
{
setCustomColor
} ifelse
} ifelse
%
currentcmykcolor anyColor?
endC? or
blend? and
{
bFill
}
{
handleOP
} ifelse
} bd
/Bc
{
gsave
setBSpace
nColors 1 gt
{
blend? startC? and
{
bFill
}
{
handleOP
} ifelse
}
{
endCapSepBc
} ifelse
grestore
newpath
} bd
/linealBm
{
/nColors dup load 1 sub store
newpath
gsave
setBSpace
blend?
{
cData type /stringtype eq
{
linImg
}
{
bFill
} ifelse
}
{
handleOP
} ifelse
grestore
nColors 1 gt
{
getRData
} if
} bd
/discardCMY
{
counttomark 4 add -3 roll pop pop pop
} bd
/testTopCC
{
6 copy ccThrough?
} bd
/getCRamp
{
{
ccDataProcs colorType 2 sub get exec
} stopped pop
blend? cDataLen 0 eq and
{
/cDataLen bDataLen store
} if
} bd
/ccGetRData
{
/fCMYK? false store
/startC? false store
/endC? false store
colorType 2 lt
{
/blend? false def
} if
blend?
{
getCRamp
}
{
setCStop
} ifelse
blend?
{
/blend? cData 1 ne store
blend?
{
cData dup type /stringtype ne
{
1 exch sub /cData xs 0
} if
pop
} if
} if
} def
/ccDataProcs
[
/eCCBlend load
{
cBType 1 eq
{
tint1Data tint2Data
/tint1Data xs
/tint2Data xs
} if
0 eq
{
/blend? false store
pop
}
{
mark 7 1 roll
testTopCC
{
/blend? 1 index 1 ne store
/startC? blend? store
/endC? false store
blend? not
{
cleartomark stop
} if
/cData tint1Data store
setCDataLen
setCustomColor
pop
stop
} if
cleartomark
} ifelse
2 index 0 eq
{
/blend? false store
}
{
mark 6
{
9 index
} repeat
testTopCC dup /blend? xs
{
/blend? 1 index 1 ne store
/endC? blend? store
/startC? false store
blend? not
{
cleartomark stop
} if
/cData tint2Data store
setCDataLen
} if
cleartomark
} ifelse
} bind
] def
/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
/cDataLen 0 cData dup type /stringtype eq
{
length exch
} if
pop store
} bd
/initSpotData
{
begin
/name null def
/tintImage null def
/tintValue null def
/spot_C  null def
/spot_M  null def
/spot_Y  null def
/spot_K  null def
end
} bd
/getRData
{
/colorType gMark store
_compositeSpotDevice 0 ne
{
spotDict begin
spot1 initSpotData
spot2 initSpotData
end
/spotColor? colorType 2 eq colorType 3 eq or def
} 
{
/spotColor? false store
} ifelse
/blend? true store
0 0 0 0 setcmykcolor
100 div /rampPoint xs
% (between 13 and 87%) 
100 div /midPoint xs
dup 0 eq
{
2
}
{
dup 1 eq
{
5
}
{
_compositeSpotDevice 0 ne
{
spotDict begin
spot1 begin
/name 3 index def
/spot_K 4 index def
/spot_Y 5 index def
/spot_M 6 index def
/spot_C 7 index def
end
end
} if
7
} ifelse
} ifelse
/tmp exch def
tmp index 100 div /endPoint xs
_compositeSpotDevice 0 ne
{
tmp 2 add index 3 eq
{
/tmp tmp 4 add def
tmp index dup 
spotDict begin
spot1/name get ne
{
spot2 begin
/name exch def
/spot_K tmp 2 add index def
/spot_Y tmp 3 add index def
/spot_M tmp 4 add index def
/spot_C tmp 5 add index def
end
}
{
pop
} ifelse
end
} if
} if
/color? colorType 0 gt store

colorType 3 eq
{
/tint2Data gMark store
} if

colorType 2 ge
{
/tint1Data gMark store
} if
_compositeSpotDevice 0 ne
{
spotDict begin

colorType 2 ge
{
colorType 3 eq
{
spot2 begin
/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
name null eq {/name /Black def} if
end
} if
spot1 begin
/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
colorType 2 eq 
{
name null eq 
{
/name spot2/name get def
spot2/name null put
} if
}
{
name null eq {/name /Black def} if
} ifelse
end
} if
end
} if

/cData gMark store
setCDataLen
colorType 0 gt
{
counttomark 4 add -3 roll
/yeData xs
/mgData xs
/cyData xs
} if
blend?
{
/bDataLen
cDataLen dup 0 eq color? and
{
[
cyData mgData yeData
]
{
dup type /stringtype eq
{
length exch pop exit
} if
pop
} forall
} if
store
bDataLen 0 eq
{
/bDataLen 1 store
} if
getData
blend?
{
composite? cDataLen 0 eq and
{
/cDataLen bDataLen store
} if
} if
}
{
setCStop
} ifelse
} bd
/Bg
{
0 0 0 0 setcmykcolor
6
{
pop
} repeat
/blendLength xs
pop pop pop
/cBName xs
/bRender xs
bRender 2 ne
{
composite? not
{
_of setoverprint
} if
_eo {eoclip} {clip} ifelse
_bn cBName 2 copy known
{
get
mark exch aload pop
/cBType xs
/nColors xs
mark exch aload pop
0 0
} if
pop pop
getRData
cBType 0 eq
{
/linealBm
}
{
bHi?
{
/pTState? nColors 2 gt store
} if
/doBlend /rdBlend load store
/rdBm
} ifelse
}
{
inLine? not
{
mark mark
} if
/Bc dup
{
cleartomark mark
} bd
/nullProc
} ifelse
load /Bm xs
} bd
/linImg
noImg
{
{
newpath doRctBlend
}
}
{
{
/doBlend
color? composite? and
{
/bCImg
}
{
/bwImage
} ifelse
load
store

0 0 moveto
tRectOK? composite? and
{
{
mark
0 1 dtransform atan cvi 90 mod 0 eq
1 0 dtransform atan cvi 90 mod 0 eq
} stopped
{
cleartomark
}
{
and exch pop
{
newpath
doRctBlend
}
{
doBlend
} ifelse
} ifelse
}
{
doBlend
} ifelse
} 
} ifelse
bd
/doRctBlend
{
gsave
/sInc 1 store
/nSamples bDataLen store
/bInc 1 bDataLen div store
/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
/pChange ubAxis 0 eq
{
0
}
{
bDataLen ubAxis div
} ifelse
store
pChange .5 gt noImg not and dup /optimize? xs
{
/nSamples ubAxis 2 div round cvi dup 1 le
{
pop 2
} if
store
/bInc 1 nSamples div store
/sInc bDataLen 1 sub nSamples 1 sub div store
} if
0
nSamples
[
/dup cvx
optimize?
{
/round cvx /cvi cvx
} if
/ndx /exch cvx /store cvx
bCFun
/rectfill where dup
{
exch pop _compositeSpotDevice 1 ne and
} if
{
0 0 bInc 1 /rectfill cvx	
}
{
0 0 /moveto cvx
bInc 0 /lineto cvx
bInc 1 /lineto cvx
0 1 /lineto cvx
/closepath cvx
/_fill_ cvx
} ifelse
bInc 0 /translate cvx
sInc /add cvx
] cvx
bind
repeat
pop
spotColor? {nsetcustomcolorend} if

grestore
} bd
/rdPrep
{
/nSamples bDataLen dup 0 eq
{
pop 1
} if
store
/sInc -1 store
/bAxis rampPoint endPoint sub store
/bInc bAxis bDataLen div neg store
/optimize? false store
tRectOK?
{
/ubAxis
bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
2 copy lt
{
exch
} if
pop store
/pChange ubAxis 0 eq
{
0
}
{
bDataLen ubAxis div
} ifelse
store
pChange .5 gt noImg not and dup /optimize? xs
{
/nSamples ubAxis 2 div round cvi dup 1 le
{
pop 2
} if
store
/bInc bAxis nSamples div neg store
/sInc bDataLen 1 sub nSamples 1 sub div neg store
} if
} if
bHi?
{
/xBCInc xHi bAxis mul nSamples div store
/yBCInc yHi bAxis mul nSamples div store
} if
} bd
/rdBlend
{
newpath
gsave
rdPrep
rampPoint
bDataLen 1 sub
nSamples
[
/dup cvx
optimize?
{
/round cvx /cvi cvx
} if
/ndx /exch cvx /store cvx
bCFun
0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
/exch cvx bInc /add cvx /exch cvx
sInc /add cvx
bHi?
{
xBCInc yBCInc /translate cvx
} if
] cvx
bind
repeat
pop pop
spotColor? {nsetcustomcolorend} if
grestore
pTState?
{
xHi bAxis mul yHi bAxis mul translate
} if
} bd
/Bh
{
pop pop
/pTState? false store
2 copy 0 ne exch 0 ne or dup /bHi? xs
{
/yHi xs
/xHi xs
0 0
} if
pop pop
} bd
/BD
{
inLine? not
{
] nColors cBType
] _bn cBName 3 -1 roll put
end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
3 -1 roll dup nullString eq dup
{
setSSave
} if
/inLine? exch def
/cBName exch def
/nColors exch def
/cBType exch def
} bd
/Bb
{
sSave null eq
{
Adobe_blend_AI5_vars begin
setSSave
} if
composite?
{
/_fill /fill load store
}
{
/__fill /fill load store
/_fill
{
_of true eq
{
currentgray 1 ne
{
__fill
} if
}
{
__fill
} ifelse
} def
} ifelse
/fill
{
} def
} bd
/BB
{
/cBType xs
cleartomark cleartomark
cBType dup
bRender
sSave dup type /savetype eq
{
restore 0
} if
pop
currentdict Adobe_blend_AI5_vars eq
{
end
} if
2 ne exch 0 gt and
{
2 eq
{
s
}
{
S
} ifelse
}
{
pop newpath
} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
