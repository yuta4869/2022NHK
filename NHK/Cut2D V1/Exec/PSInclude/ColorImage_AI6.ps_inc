%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
Adobe_ColorImage_AI6 begin
Adobe_ColorImage_AI6 {
dup type /arraytype eq {
dup xcheck {
bind
} if
} if
pop pop
} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
/plateindex -1 def
/_newproc null def
/_proc1 null def
/_proc2 null def
/channelcount 0 def
/sourcecount 0 def
/sourcearray 4 array def
/_ptispace null def
/_ptiname null def
/_pti0 0 def
/_pti1 0 def
/_ptiproc null def
/_ptiscale 0 def
/_pticomps 0 def
/_ptibuf 0 string def
/_gtigray 0 def
/_cticmyk null def
/_rtirgb null def
/XIEnable true def
/XIType 0 def
/XIEncoding 0 def
/XICompression 0 def
/XIChannelCount 0 def
/XIBitsPerPixel 0 def
/XIImageHeight 0 def
/XIImageWidth 0 def
/XIImageMatrix null def
/XIRowBytes 0 def
/XIFile null def
/XIBuffer1 null def
/XIBuffer2 null def
/XIDataProc null def
/XIVersion 6 def
/XIColorSpace /DeviceGray def
/XIColorValues 0 def
end
currentdict /_colorimage known not {
/colorimage where {
/colorimage get /_colorimage exch def
}{
/_colorimage null def
} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
4 index ne {
pop pop pop false
}{
4 index ne {
pop pop false
}{
4 index ne {
pop false
}{
4 index eq
} ifelse
} ifelse
} ifelse
} def
/TestPlateIndex {
Adobe_ColorImage_AI6_Vars begin
/plateindex -1 def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
grestore
1 0 0 0 FourEqual { 
/plateindex 0 def
}{
0 1 0 0 FourEqual { 
/plateindex 1 def
}{
0 0 1 0 FourEqual {
/plateindex 2 def
}{
0 0 0 1 FourEqual { 
	/plateindex 3 def
}{
	0 0 0 0 FourEqual {
		/plateindex 5 def
	} if
} ifelse
} ifelse
} ifelse
} ifelse
pop pop pop pop
} if
plateindex
end
} def
/concatprocs {
/packedarray where {
pop dup type /packedarraytype eq 2 index type
/packedarraytype eq or
}{
false
} ifelse
{
/_proc2 exch cvlit def
/_proc1 exch cvlit def
_proc1 aload pop
_proc2 aload pop
_proc1 length
_proc2 length add
packedarray cvx
}{
/_proc2 exch cvlit def
/_proc1 exch cvlit def
/_newproc _proc1 length _proc2 length add array def
_newproc 0 _proc1 putinterval
_newproc _proc1 length _proc2 putinterval
_newproc cvx
} ifelse
} def
/clrspaceissepn {
type /arraytype eq 
} def
/clrspacegetname {
dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
aload pop pop pop colormake
} def
/clrspacegetcomps {
dup /DeviceGray eq {
pop 1
}{
dup /DeviceRGB eq {
pop 3
}{
/DeviceCMYK eq {
4
}{
1
} ifelse
} ifelse
} ifelse
} def
/clrspacemarksplate {
dup /DeviceGray eq {
pop plateindex 3 eq
}{
dup /DeviceRGB eq {
pop plateindex 5 ne
}{
dup /DeviceCMYK eq {
pop plateindex 5 ne
}{
/findcmykcustomcolor where {
pop
dup length 2 sub get
0.1 0.1 0.1 0.1 5 -1 roll
findcmykcustomcolor 1 setcustomcolor
systemdict /currentgray get exec
1 ne
}{
pop plateindex 5 ne
} ifelse
} ifelse
} ifelse
} ifelse
} def
/colormake {
dup clrspacegetcomps
exch 1 index 2 add 1 roll
dup 1 eq {pop}{array astore} ifelse
exch
} def
/colorexpand {
dup clrspacegetname exch
dup clrspaceissepn {
clrspacegetalt
exch 4 1 roll
}{
1 3 1 roll
} ifelse
} def
/colortint {
dup /DeviceGray eq {
3 1 roll 1 exch sub mul 1 exch sub exch
}{
dup /DeviceRGB eq {
3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
}{
dup /DeviceCMYK eq {
3 1 roll {1 index mul exch} forall pop 4 array astore exch
}{
3 1 roll mul exch
} ifelse
} ifelse
} ifelse
} def
/colortocmyk {
dup /DeviceGray eq {
pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
}{
dup /DeviceRGB eq {
pop aload pop _rgbtocmyk 4 array astore
}{
dup /DeviceCMYK eq {
pop
}{
clrspacegetalt colortint colortocmyk
} ifelse
} ifelse
} ifelse
} def
/makeimagedict {
7 dict begin
/ImageType 1 def
/Decode exch def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
currentdict end
} def
/stringinvert {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} def
/stringknockout {
0 1 2 index length 1 sub {
255 2 index 3 1 roll put
} for
} def
/stringapply {
0 1 4 index length 1 sub {
dup
4 index exch get
3 index 3 1 roll
3 index exec
} for
pop exch pop
} def
/WalkRGBString {
0 3 index
dup length 1 sub 0 3 3 -1 roll {
3 getinterval {} forall
5 index exec
3 index
} for

5 {pop} repeat
} def
/WalkCMYKString
{
0 3 index
dup length 1 sub 0 4 3 -1 roll {
4 getinterval {} forall

6 index exec

3 index

} for

5 { pop } repeat

} def
/StuffRGBIntoGrayString
{
.11 mul exch

.59 mul add exch

.3 mul add

cvi 3 copy put

pop 1 add
} def
/StuffCMYKIntoGrayString
{
exch .11 mul add

exch .59 mul add

exch .3 mul add

dup 255 gt { pop 255 } if

255 exch sub cvi 3 copy put

pop 1 add
} def
/RGBToGrayImageProc {	
Adobe_ColorImage_AI6_Vars begin 
sourcearray 0 get exec
dup length 3 idiv string
dup 3 1 roll 

/StuffRGBIntoGrayString load exch
WalkRGBString
end
} def
/CMYKToGrayImageProc {	
Adobe_ColorImage_AI6_Vars begin
sourcearray 0 get exec
dup length 4 idiv string
dup 3 1 roll 

/StuffCMYKIntoGrayString load exch
WalkCMYKString
end
} def
/SeparateCMYKImageProc {	
Adobe_ColorImage_AI6_Vars begin
sourcecount 0 ne {
sourcearray plateindex get exec
}{			
sourcearray 0 get exec

dup length 4 idiv string

0 2 index

plateindex 4 2 index length 1 sub {
get 255 exch sub

3 copy put pop 1 add

2 index
} for
pop pop exch pop
} ifelse
end
} def

/ColorImageCompositeEmulator {
pop true eq {
Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
}{
Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
Adobe_ColorImage_AI6_Vars begin
sourcearray 0 3 -1 roll put

channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
load
end
} if
image
} ifelse
} def
/colorimage {
Adobe_ColorImage_AI6_Vars begin
/channelcount 1 index def
/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
4 sourcecount add index
end

dup 8 eq exch 1 eq or not {
/_colorimage load null ne {
_colorimage
}{
Adobe_ColorImage_AI6_Vars /sourcecount get
7 add { pop } repeat
} ifelse
}{
dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
/_colorimage load null eq {
ColorImageCompositeEmulator
}{
dup 1 eq {
pop pop image
}{
Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
gsave

0 _currenttransfer exec
1 _currenttransfer exec
eq
{ 0 _currenttransfer exec 0.5 lt }
{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse

{ { pop 0 } } { { pop 1 } } ifelse
systemdict /settransfer get exec
} if

_colorimage

Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
grestore
} if
} ifelse
} ifelse
}{
dup 1 eq {
pop pop
image
}{
pop pop
Adobe_ColorImage_AI6_Vars begin
sourcecount -1 0 {			
exch sourcearray 3 1 roll put
} for
/SeparateCMYKImageProc load
end
systemdict /image get exec
} ifelse
} ifelse
} ifelse
} def
/proctintimage {
/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
/_pticomps _ptispace clrspacegetcomps store
/_ptiscale _pti1 _pti0 sub store
level2? {
_ptiname length 0 gt version cvr 2012 ge and {
[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
[_pti0 _pti1] makeimagedict _image
}{
[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
[0 255] makeimagedict _image
} ifelse
}{
_pticomps 1 eq {
{
dup
{
255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
} stringapply
} concatprocs _image
}{
{
dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
_ptibuf {
exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
_pticomps 2 add -2 roll
_pticomps 1 sub -1 0 {
1 index add 2 index exch
5 -1 roll
255 mul cvi put
} for
pop pop
} stringapply
} concatprocs false _pticomps
/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
} ifelse
} ifelse
} def
/graytintimage {
/_gtigray 5 -1 roll store
{1 _gtigray sub mul 1 exch sub} 4 1 roll
/DeviceGray proctintimage
} def
/cmyktintimage {
/_cticmyk 5 -1 roll store
{_cticmyk {1 index mul exch} forall pop} 4 1 roll
/DeviceCMYK proctintimage
} def
/rgbtintimage {
/_rtirgb 5 -1 roll store
{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
/DeviceRGB proctintimage
} def
/tintimage {
TestPlateIndex -1 eq {
colorexpand
3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
dup /DeviceGray eq {
pop graytintimage
}{
dup /DeviceRGB eq {
pop rgbtintimage
}{
pop cmyktintimage
} ifelse
} ifelse
}{
dup clrspacemarksplate {
plateindex 5 lt {
colortocmyk plateindex get 1 exch sub
exch {1 0}{0 1} ifelse () graytintimage
}{
pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
} ifelse
}{
pop pop pop
{pop 1} 0 1 () /DeviceGray proctintimage
} ifelse
} ifelse
} def
/XINullImage {
} def
/XIImageMask {
XIImageWidth XIImageHeight false
[XIImageWidth 0 0 XIImageHeight neg 0 0]
/XIDataProc load
imagemask
} def
/XIImageTint {
0 setgray
XIImageWidth XIImageHeight XIBitsPerPixel
[XIImageWidth 0 0 XIImageHeight neg 0 0]
/XIDataProc load
XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
0 setgray
XIImageWidth XIImageHeight XIBitsPerPixel
[XIImageWidth 0 0 XIImageHeight neg 0 0]
/XIDataProc load
XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
pop pop
} def
/XF {
13 {pop} repeat
} def
/Xh {
Adobe_ColorImage_AI6_Vars begin
gsave
/XIType exch def
/XIImageHeight exch def
/XIImageWidth exch def
/XIImageMatrix exch def
0 0 moveto
XIImageMatrix concat
XIImageWidth XIImageHeight scale

XIType 1 eq {
/_lp /null ddef
_fc
/_lp /imagemask ddef
}
if
/XIVersion 7 def
end
} def
/XH {
Adobe_ColorImage_AI6_Vars begin
/XIVersion 6 def
grestore
end
} def
/XIEnable {
Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
Adobe_ColorImage_AI6_Vars begin
colormake
/XIColorSpace exch def
/XIColorValues exch def
end
} def
/XI
{
Adobe_ColorImage_AI6_Vars begin
gsave
/XIType exch def
cvi dup
256 idiv /XICompression exch store
256 mod /XIEncoding exch store
pop pop
/XIChannelCount exch def
/XIBitsPerPixel exch def
/XIImageHeight exch def
/XIImageWidth exch def
pop pop pop pop
/XIImageMatrix exch def
XIBitsPerPixel 1 eq {
XIImageWidth 8 div ceiling cvi
}{
XIImageWidth XIChannelCount mul
} ifelse
/XIRowBytes exch def
XIEncoding 0 ne XIVersion 6 le and {
currentfile 128 string readline pop pop
} if
XICompression 0 eq {
/XIBuffer1 XIRowBytes string def
XIEncoding 0 eq {
{currentfile XIBuffer1 readhexstring pop}
}{
{currentfile XIBuffer1 readstring pop}
} ifelse
}{
/XIBuffer1 256 string def
/XIBuffer2 XIRowBytes string def
{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
/ASCIIHexDecode filter /DCTDecode filter
/XIFile exch def
{XIFile XIBuffer2 readstring pop}
} ifelse
/XIDataProc exch def

XIVersion 6 le {
0 0 moveto
XIImageMatrix concat
XIImageWidth XIImageHeight scale
XIType 1 eq {
/_lp /null ddef
_fc
/_lp /imagemask ddef
} if
} if
XIEnable {
XIType 1 eq {
XIImageMask
}{
XIType 2 eq XIType 3 eq or {
XIImageTint
}{
XIImage
} ifelse
} ifelse
}{
XINullImage
} ifelse
grestore
end
} def
end
%%EndProcSet
